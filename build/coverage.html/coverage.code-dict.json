{"/home/travis/build/npmtest/node-npmtest-ttf2woff/test.js":"/* istanbul instrument in package npmtest_ttf2woff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ttf2woff/lib.npmtest_ttf2woff.js":"/* istanbul instrument in package npmtest_ttf2woff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ttf2woff = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ttf2woff = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ttf2woff/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ttf2woff && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ttf2woff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ttf2woff\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ttf2woff.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ttf2woff.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ttf2woff.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ttf2woff.__dirname + '/lib.npmtest_ttf2woff.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ttf2woff/node_modules/ttf2woff/index.js":"/*\n    Author: Viktor Semykin <thesame.ml@gmail.com>\n\n    Written for fontello.com project.\n*/\n\n'use strict';\n\n\nvar ByteBuffer = require('microbuffer');\nvar deflate = require('pako/lib/deflate.js').deflate;\n\n\nfunction ulong(t) {\n  /*jshint bitwise:false*/\n  t &= 0xffffffff;\n  if (t < 0) {\n    t += 0x100000000;\n  }\n  return t;\n}\n\nfunction longAlign(n) {\n  /*jshint bitwise:false*/\n  return (n + 3) & ~3;\n}\n\nfunction calc_checksum(buf) {\n  var sum = 0;\n  var nlongs = buf.length / 4;\n\n  for (var i = 0; i < nlongs; ++i) {\n    var t = buf.getUint32(i * 4);\n\n    sum = ulong(sum + t);\n  }\n  return sum;\n}\n\nvar WOFF_OFFSET = {\n  MAGIC: 0,\n  FLAVOR: 4,\n  SIZE: 8,\n  NUM_TABLES: 12,\n  RESERVED: 14,\n  SFNT_SIZE: 16,\n  VERSION_MAJ: 20,\n  VERSION_MIN: 22,\n  META_OFFSET: 24,\n  META_LENGTH: 28,\n  META_ORIG_LENGTH: 32,\n  PRIV_OFFSET: 36,\n  PRIV_LENGTH: 40\n};\n\nvar WOFF_ENTRY_OFFSET = {\n  TAG: 0,\n  OFFSET: 4,\n  COMPR_LENGTH: 8,\n  LENGTH: 12,\n  CHECKSUM: 16\n};\n\nvar SFNT_OFFSET = {\n  TAG: 0,\n  CHECKSUM: 4,\n  OFFSET: 8,\n  LENGTH: 12\n};\n\nvar SFNT_ENTRY_OFFSET = {\n  FLAVOR: 0,\n  VERSION_MAJ: 4,\n  VERSION_MIN: 6,\n  CHECKSUM_ADJUSTMENT: 8\n};\n\nvar MAGIC = {\n  WOFF: 0x774F4646,\n  CHECKSUM_ADJUSTMENT: 0xB1B0AFBA\n};\n\nvar SIZEOF = {\n  WOFF_HEADER: 44,\n  WOFF_ENTRY: 20,\n  SFNT_HEADER: 12,\n  SFNT_TABLE_ENTRY: 16\n};\n\nfunction woffAppendMetadata(src, metadata) {\n\n  var zdata =  deflate(metadata);\n\n  src.setUint32(WOFF_OFFSET.SIZE, src.length + zdata.length);\n  src.setUint32(WOFF_OFFSET.META_OFFSET, src.length);\n  src.setUint32(WOFF_OFFSET.META_LENGTH, zdata.length);\n  src.setUint32(WOFF_OFFSET.META_ORIG_LENGTH, metadata.length);\n\n  //concatenate src and zdata\n  var buf = new ByteBuffer(src.length + zdata.length);\n\n  buf.writeBytes(src.toArray());\n  buf.writeBytes(zdata);\n\n  return buf;\n}\n\nfunction ttf2woff(arr, options) {\n  var buf = new ByteBuffer(arr);\n\n  options = options || {};\n\n  var version = {\n    maj: 0,\n    min: 1\n  };\n  var numTables = buf.getUint16(4);\n  //var sfntVersion = buf.getUint32 (0);\n  var flavor = 0x10000;\n\n  var woffHeader = new ByteBuffer(SIZEOF.WOFF_HEADER);\n\n  woffHeader.setUint32(WOFF_OFFSET.MAGIC, MAGIC.WOFF);\n  woffHeader.setUint16(WOFF_OFFSET.NUM_TABLES, numTables);\n  woffHeader.setUint16(WOFF_OFFSET.RESERVED, 0);\n  woffHeader.setUint32(WOFF_OFFSET.SFNT_SIZE, 0);\n  woffHeader.setUint32(WOFF_OFFSET.META_OFFSET, 0);\n  woffHeader.setUint32(WOFF_OFFSET.META_LENGTH, 0);\n  woffHeader.setUint32(WOFF_OFFSET.META_ORIG_LENGTH, 0);\n  woffHeader.setUint32(WOFF_OFFSET.PRIV_OFFSET, 0);\n  woffHeader.setUint32(WOFF_OFFSET.PRIV_LENGTH, 0);\n\n  var entries = [];\n\n  var i, tableEntry;\n\n  for (i = 0; i < numTables; ++i) {\n    var data = new ByteBuffer(buf.buffer, SIZEOF.SFNT_HEADER + i * SIZEOF.SFNT_TABLE_ENTRY);\n\n    tableEntry = {\n      Tag: new ByteBuffer(data, SFNT_OFFSET.TAG, 4),\n      checkSum: data.getUint32(SFNT_OFFSET.CHECKSUM),\n      Offset: data.getUint32(SFNT_OFFSET.OFFSET),\n      Length: data.getUint32(SFNT_OFFSET.LENGTH)\n    };\n    entries.push (tableEntry);\n  }\n  entries = entries.sort(function (a, b) {\n    var aStr = a.Tag.toString();\n    var bStr = b.Tag.toString();\n\n    return aStr === bStr ? 0 : aStr < bStr ? -1 : 1;\n  });\n\n  var offset = SIZEOF.WOFF_HEADER + numTables * SIZEOF.WOFF_ENTRY;\n  var woffSize = offset;\n  var sfntSize = SIZEOF.SFNT_HEADER + numTables * SIZEOF.SFNT_TABLE_ENTRY;\n\n  var tableBuf = new ByteBuffer(numTables * SIZEOF.WOFF_ENTRY);\n\n  for (i = 0; i < numTables; ++i) {\n    tableEntry = entries[i];\n\n    if (tableEntry.Tag.toString() !== 'head') {\n      var algntable = new ByteBuffer(buf.buffer, tableEntry.Offset, longAlign(tableEntry.Length));\n\n      if (calc_checksum(algntable) !== tableEntry.checkSum) {\n        throw 'Checksum error in ' + tableEntry.Tag.toString();\n      }\n    }\n\n    tableBuf.setUint32(i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.TAG, tableEntry.Tag.getUint32(0));\n    tableBuf.setUint32(i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.LENGTH, tableEntry.Length);\n    tableBuf.setUint32(i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.CHECKSUM, tableEntry.checkSum);\n    sfntSize += longAlign(tableEntry.Length);\n  }\n\n  var sfntOffset = SIZEOF.SFNT_HEADER + entries.length * SIZEOF.SFNT_TABLE_ENTRY;\n  var csum = calc_checksum (new ByteBuffer(buf.buffer, 0, SIZEOF.SFNT_HEADER));\n\n  for (i = 0; i < entries.length; ++i) {\n    tableEntry = entries[i];\n\n    var b = new ByteBuffer(SIZEOF.SFNT_TABLE_ENTRY);\n\n    b.setUint32(SFNT_OFFSET.TAG, tableEntry.Tag.getUint32(0));\n    b.setUint32(SFNT_OFFSET.CHECKSUM, tableEntry.checkSum);\n    b.setUint32(SFNT_OFFSET.OFFSET, sfntOffset);\n    b.setUint32(SFNT_OFFSET.LENGTH, tableEntry.Length);\n    sfntOffset += longAlign(tableEntry.Length);\n    csum += calc_checksum (b);\n    csum += tableEntry.checkSum;\n  }\n\n  var checksumAdjustment = ulong(MAGIC.CHECKSUM_ADJUSTMENT - csum);\n\n  var len, woffDataChains = [];\n\n  for (i = 0; i < entries.length; ++i) {\n    tableEntry = entries[i];\n\n    var sfntData = new ByteBuffer(buf.buffer, tableEntry.Offset, tableEntry.Length);\n\n    if (tableEntry.Tag.toString() === 'head') {\n      version.maj = sfntData.getUint16(SFNT_ENTRY_OFFSET.VERSION_MAJ);\n      version.min = sfntData.getUint16(SFNT_ENTRY_OFFSET.VERSION_MIN);\n      flavor = sfntData.getUint32(SFNT_ENTRY_OFFSET.FLAVOR);\n      sfntData.setUint32 (SFNT_ENTRY_OFFSET.CHECKSUM_ADJUSTMENT, checksumAdjustment);\n    }\n\n    var res = deflate(sfntData.toArray());\n\n    var compLength;\n\n    // We should use compression only if it really save space (standard requirement).\n    // Also, data should be aligned to long (with zeros?).\n    compLength = Math.min(res.length, sfntData.length);\n    len = longAlign(compLength);\n\n    var woffData = new ByteBuffer(len);\n\n    woffData.fill(0);\n\n    if (res.length >= sfntData.length) {\n      woffData.writeBytes(sfntData.toArray());\n    } else {\n      woffData.writeBytes(res);\n    }\n\n    tableBuf.setUint32(i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.OFFSET, offset);\n\n    offset += woffData.length;\n    woffSize += woffData.length;\n\n    tableBuf.setUint32(i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.COMPR_LENGTH, compLength);\n\n    woffDataChains.push(woffData);\n  }\n\n  woffHeader.setUint32(WOFF_OFFSET.SIZE, woffSize);\n  woffHeader.setUint32(WOFF_OFFSET.SFNT_SIZE, sfntSize);\n  woffHeader.setUint16(WOFF_OFFSET.VERSION_MAJ, version.maj);\n  woffHeader.setUint16(WOFF_OFFSET.VERSION_MIN, version.min);\n  woffHeader.setUint32(WOFF_OFFSET.FLAVOR, flavor);\n\n  var out = new ByteBuffer(woffSize);\n\n  out.writeBytes(woffHeader.buffer);\n  out.writeBytes(tableBuf.buffer);\n\n  for (i = 0; i < woffDataChains.length; i++) {\n    out.writeBytes(woffDataChains[i].buffer);\n  }\n\n  if (!options.metadata) return out;\n\n  return woffAppendMetadata(out, options.metadata);\n}\n\nmodule.exports = ttf2woff;\n","/home/travis/build/npmtest/node-npmtest-ttf2woff/node_modules/ttf2woff/ttf2woff.js":"#!/usr/bin/env node\n/*\n    Author: Viktor Semykin <thesame.ml@gmail.com>\n\n    Written for fontello.com project.\n*/\n\n'use strict';\n\n\nvar fs = require('fs');\nvar ArgumentParser = require('argparse').ArgumentParser;\n\nvar ttf2woff = require('./index.js');\n\n\nvar parser = new ArgumentParser({\n  version: require('./package.json').version,\n  addHelp: true,\n  description: 'TTF to WOFF font converter'\n});\n\nparser.addArgument(\n  [ 'infile' ],\n  {\n    nargs: 1,\n    help: 'Input file'\n  }\n);\n\nparser.addArgument(\n  [ 'outfile' ],\n  {\n    nargs: 1,\n    help: 'Output file'\n  }\n);\n\nparser.addArgument(\n  [ '-m', '--metadata' ],\n  {\n    help: 'Metadata XML file (optional)',\n    required: false\n  }\n);\n\nvar args = parser.parseArgs();\nvar input;\nvar options = {};\n\n/* eslint-disable */\n\ntry {\n  input = fs.readFileSync(args.infile[0]);\n} catch (e) {\n  console.error(\"Can't open input file (%s)\", args.infile[0]);\n  process.exit(1);\n}\n\nif (args.metadata) {\n  try {\n    options.metadata = Array.prototype.slice.call(fs.readFileSync (args.metadata), 0);\n  } catch (e) {\n    console.error(\"Can't open metadata file (%s)\", args.infile);\n    process.exit(1);\n  }\n}\n\nvar ttf = new Uint8Array(input);\n//var ttf = Array.prototype.slice.call(input, 0);\nvar woff = new Buffer(ttf2woff(ttf, options).buffer);\n\nfs.writeFileSync(args.outfile[0], woff);\n\n"}